"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const httpRequestUtils_1 = require("./httpRequestUtils");
const __1 = require("..");
/**
 * Generate Answer api utils class.
 *
 * @remarks
 * This class is helper class for generate answer api, which is used to make queries to a single QnA Maker knowledge base and return the result.
 */
class GenerateAnswerUtils {
    /**
     * Creates new Generate answer utils.
     * @param _options Settings used to configure the instance.
     * @param endpoint The endpoint of the knowledge base to query.
     */
    constructor(_options, endpoint) {
        this._options = _options;
        this.endpoint = endpoint;
        this.httpRequestUtils = new httpRequestUtils_1.HttpRequestUtils();
        this.validateOptions(this._options);
    }
    /**
     * Called internally to query the QnA Maker service.
     * @param endpoint The endpoint of the knowledge base to query.
     * @param question Question which need to be queried.
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    async queryQnaService(endpoint, question, options) {
        const url = `${endpoint.host}/knowledgebases/${endpoint.knowledgeBaseId}/generateanswer`;
        const queryOptions = { ...this._options, ...options };
        this.validateOptions(queryOptions);
        var payloadBody = JSON.stringify({
            question: question,
            ...queryOptions
        });
        const qnaResultJson = await this.httpRequestUtils.executeHttpRequest(url, payloadBody, this.endpoint, queryOptions.timeout);
        return this.formatQnaResult(qnaResultJson);
    }
    /**
     * Emits a trace event detailing a QnA Maker call and its results.
     *
     * @param context Context for the current turn of conversation with the user.
     * @param answers Answers returned by QnA Maker.
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    async emitTraceInfo(context, answers, queryOptions) {
        const requestOptions = { ...this._options, ...queryOptions };
        const { scoreThreshold, top, strictFilters, metadataBoost } = requestOptions;
        const traceInfo = {
            message: context.activity,
            queryResults: answers,
            knowledgeBaseId: this.endpoint.knowledgeBaseId,
            scoreThreshold,
            top,
            strictFilters,
            metadataBoost
        };
        return context.sendActivity({
            type: 'trace',
            valueType: __1.QNAMAKER_TRACE_TYPE,
            name: __1.QNAMAKER_TRACE_NAME,
            label: __1.QNAMAKER_TRACE_LABEL,
            value: traceInfo
        });
    }
    /**
     * Validate qna maker options
     *
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    validateOptions(options) {
        const { scoreThreshold, top } = options;
        if (scoreThreshold) {
            this.validateScoreThreshold(scoreThreshold);
        }
        if (top) {
            this.validateTop(top);
        }
    }
    /**
     * Sorts all QnAMakerResult from highest-to-lowest scoring.
     * Filters QnAMakerResults within threshold specified (default threshold: .001).
     *
     * @param answers Answers returned by QnA Maker.
     * @param options (Optional) The options for the QnA Maker knowledge base. If null, constructor option is used for this instance.
     */
    static sortAnswersWithinThreshold(answers = [], queryOptions) {
        const minScore = typeof queryOptions.scoreThreshold === 'number' ? queryOptions.scoreThreshold : 0.001;
        return answers.filter((ans) => ans.score >= minScore)
            .sort((a, b) => b.score - a.score);
    }
    formatQnaResult(qnaResult) {
        return qnaResult.answers.map((ans) => {
            ans.score = ans.score / 100;
            if (ans.qnaId) {
                ans.id = ans.qnaId;
                delete ans.qnaId;
            }
            return ans;
        });
    }
    validateScoreThreshold(scoreThreshold) {
        if (typeof scoreThreshold !== 'number' || !(scoreThreshold > 0 && scoreThreshold < 1)) {
            throw new TypeError(`"${scoreThreshold}" is an invalid scoreThreshold. QnAMakerOptions.scoreThreshold must have a value between 0 and 1.`);
        }
    }
    validateTop(qnaOptionTop) {
        if (!Number.isInteger(qnaOptionTop) || qnaOptionTop < 1) {
            throw new RangeError(`"${qnaOptionTop}" is an invalid top value. QnAMakerOptions.top must be an integer greater than 0.`);
        }
    }
}
exports.GenerateAnswerUtils = GenerateAnswerUtils;
//# sourceMappingURL=generateAnswerUtils.js.map